name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:

- stage: Install
  jobs:
  - job: Install
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: install terraform'
    - task: TerraformCLI@0
      displayName: 'check terraform version'
      inputs:
        command: version

- stage: Terraform
  jobs:
  - job: Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: 'init'
        backendType: azurerm
        backendServiceArm: '509e635b-952b-4844-9c20-a910f4b573f0'
        environmentServiceName: '509e635b-952b-4844-9c20-a910f4b573f0'
        runAzLogin: true
    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: 'plan'
        commandOptions: '-out main.plan'
        environmentServiceName: '509e635b-952b-4844-9c20-a910f4b573f0'
        runAzLogin: true
    - task: TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        command: 'apply'
        commandOptions: 'main.plan'
        environmentServiceName: '509e635b-952b-4844-9c20-a910f4b573f0'
        runAzLogin: true

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'SHA256:BU+qPaoHheNWUkHrUgRVdpoVYafW3OZtmj0Ch5HZQXU'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSvQI5cDJaeO5eyL9ZtryYQqsb850C8Hi/dIHkw5WUweiE76qYmVBFtdm3lkx3ywIWgfcZjMuo83a+WA3zUaNmm+CYlN83/H3QKb4EmU7q4Ec6fAaST3VYaNFNiTepd6r6uMQK2U9glyLTragM9tQHMadfPSBnE9doW3AOLAl5lezdc9NV6bG+xewf5D+nNOfklAGJ05a2YyW/Yszwq2U+FXq14zmVJG+bYdmS1JDYehNeq13dlra5wbPap+ce/803FSZbbwSd1eW3qYGGbpLuqu1IhQpogbKsaax9Z9e23n/obNPs0Owm/XVuIXXv6pmBfhcX8um4BLUps6+9x8fb'
        sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium Tests'
      inputs:
        rootFolderOrFile: 'selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive JMeter Tests'
      inputs:
        rootFolderOrFile: 'jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
    - task: Bash@3
      displayName: 'Install newman and run postman tests'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          npm install -g newman
          newman run ./postman/Starter_APIs_Data_Validation.postman_collection.json -e ./postman/Starter_APIs.postman_environment.json --reporters cli,junit --reporter-junit-export ./results/junitReport_data_validation.xml --delay-request 5000 --suppress-exit-code
          newman run ./postman/Starter_APIs_Regression.postman_collection.json -e ./postman/Starter_APIs.postman_environment.json --reporters cli,junit --reporter-junit-export ./results/junitReport_regression.xml --delay-request 5000 --suppress-exit-code
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junitReport_*.xml' 
        failTaskOnFailedTests: false
        testRunTitle: 'Postman API Tests'
        publishRunAttachments: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload fakerestapi Package'
      artifact: drop-fakerestapi
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
      displayName: 'Upload Selenium Package'
      artifact: drop-selenium
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip
      displayName: 'Upload JMeter Package'
      artifact: drop-jmeter

- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '509e635b-952b-4844-9c20-a910f4b573f0'
              appName: 'dcollioni-app-003-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: SeleniumTests
    environment:
      name:  TEST
      resourceType: VirtualMachine
      tags: udacity
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt-get upgrade -y
                sudo add-apt-repository ppa:deadsnakes/ppa -y
                sudo apt update
                sudo apt-get install unzip -y
                sudo apt install python3.7 -y
                sudo apt install virtualenv -y
                sudo apt install make -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                virtualenv -p python3.7 ~/.selenium
                
                unzip $(Pipeline.Workspace)/drop-selenium/$(Build.BuildId)-selenium.zip -d $(Pipeline.Workspace)/drop-selenium/$(Build.BuildId)-selenium
                cd $(Pipeline.Workspace)/drop-selenium/$(Build.BuildId)-selenium
                ls -la
                
                source ~/.selenium/bin/activate
                make install
                make run > selenium_test_logs.txt

                LOGS_FILE=~/logs/selenium_test_logs.txt
                if [ -f "$LOGS_FILE" ]; then
                    echo "$LOGS_FILE exists."
                else 
                    echo "$LOGS_FILE does not exist. Creating..."
                    mkdir ~/logs
                    touch ~/logs/selenium_test_logs.txt
                fi

                cat ./selenium_test_logs.txt >> ~/logs/selenium_test_logs.txt
                cat ./selenium_test_logs.txt
  - deployment: JMeterTests
    dependsOn: FakeRestAPI
    environment:
      name:  TEST
      resourceType: VirtualMachine
      tags: udacity
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt install default-jre -y

                JMETER_FILE=~/downloads/apache-jmeter-5.5/bin/jmeter
                if [ -f "$JMETER_FILE" ]; then
                    echo "$JMETER_FILE exists."
                else 
                    echo "$JMETER_FILE does not exist. Installing..."
                    mkdir ~/downloads
                    cd ~/downloads
                    wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.zip
                    unzip apache-jmeter-5.5.zip
                fi
                
                unzip $(Pipeline.Workspace)/drop-jmeter/$(Build.BuildId)-jmeter.zip -d $(Pipeline.Workspace)/drop-jmeter/$(Build.BuildId)-jmeter
                cd $(Pipeline.Workspace)/drop-jmeter/$(Build.BuildId)-jmeter
                ls -la
                
                JVM_ARGS="-Xms128m -Xmx256m" ~/downloads/apache-jmeter-5.5/bin/jmeter -n -t ./Udacity_Cloud_DevOps_Project_03.jmx -l ./results.jtl -e -o ./report
